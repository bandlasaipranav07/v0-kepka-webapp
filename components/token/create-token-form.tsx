"use client"

import type React from "react"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Coins, Code, Shield, Info } from "lucide-react"
import { createClient } from "@/lib/supabase/client"

interface CreateTokenFormProps {
  userId: string
}

export function CreateTokenForm({ userId }: CreateTokenFormProps) {
  const router = useRouter()
  const supabase = createClient()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // Form state
  const [tokenName, setTokenName] = useState("")
  const [symbol, setSymbol] = useState("")
  const [decimals, setDecimals] = useState(6)
  const [totalSupply, setTotalSupply] = useState("")
  const [description, setDescription] = useState("")
  const [imageUrl, setImageUrl] = useState("")

  // Minting policy settings
  const [scriptType, setScriptType] = useState<"native" | "plutus">("native")
  const [mintingPolicy, setMintingPolicy] = useState<"unlimited" | "limited" | "time-locked" | "custom">("unlimited")
  const [lockUntil, setLockUntil] = useState("")
  const [customScript, setCustomScript] = useState("")

  // Advanced settings
  const [enableBurning, setEnableBurning] = useState(true)
  const [enableTransfers, setEnableTransfers] = useState(true)
  const [requireSignature, setRequireSignature] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)

    try {
      // Validate form
      if (!tokenName || !symbol || !totalSupply) {
        throw new Error("Please fill in all required fields")
      }

      if (symbol.length > 8) {
        throw new Error("Symbol must be 8 characters or less")
      }

      const supplyAmount = Number.parseFloat(totalSupply)
      if (isNaN(supplyAmount) || supplyAmount <= 0) {
        throw new Error("Total supply must be a positive number")
      }

      // Generate policy ID (in real implementation, this would be generated by Cardano)
      const policyId = `policy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const assetName = Buffer.from(symbol).toString("hex")

      // Create token in database
      const { data: token, error: tokenError } = await supabase
        .from("tokens")
        .insert({
          token_name: tokenName,
          policy_id: policyId,
          asset_name: assetName,
          symbol: symbol.toUpperCase(),
          decimals,
          total_supply: Math.floor(supplyAmount * Math.pow(10, decimals)),
          description,
          image_url: imageUrl || null,
          creator_id: userId,
        })
        .select()
        .single()

      if (tokenError) throw tokenError

      // Create initial mint transaction record
      const { error: txError } = await supabase.from("transactions").insert({
        tx_hash: `mint_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        token_id: token.id,
        user_id: userId,
        transaction_type: "mint",
        amount: Math.floor(supplyAmount * Math.pow(10, decimals)),
        status: "pending",
        metadata: {
          script_type: scriptType,
          minting_policy: mintingPolicy,
          lock_until: lockUntil || null,
          custom_script: customScript || null,
          enable_burning: enableBurning,
          enable_transfers: enableTransfers,
          require_signature: requireSignature,
        },
      })

      if (txError) throw txError

      // In a real implementation, this would trigger the actual Cardano transaction
      console.log("Token creation initiated:", {
        policyId,
        assetName,
        amount: supplyAmount,
        scriptType,
        mintingPolicy,
      })

      router.push("/dashboard?created=true")
    } catch (error: any) {
      setError(error.message)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-8">
      <Tabs defaultValue="basic" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="basic" className="flex items-center space-x-2">
            <Coins className="h-4 w-4" />
            <span>Basic Info</span>
          </TabsTrigger>
          <TabsTrigger value="policy" className="flex items-center space-x-2">
            <Code className="h-4 w-4" />
            <span>Minting Policy</span>
          </TabsTrigger>
          <TabsTrigger value="advanced" className="flex items-center space-x-2">
            <Shield className="h-4 w-4" />
            <span>Advanced</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="basic" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Token Information</CardTitle>
              <CardDescription>Basic details about your token</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="tokenName">Token Name *</Label>
                  <Input
                    id="tokenName"
                    placeholder="My Awesome Token"
                    value={tokenName}
                    onChange={(e) => setTokenName(e.target.value)}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="symbol">Symbol *</Label>
                  <Input
                    id="symbol"
                    placeholder="MAT"
                    value={symbol}
                    onChange={(e) => setSymbol(e.target.value.toUpperCase())}
                    maxLength={8}
                    required
                  />
                  <p className="text-xs text-gray-500">Max 8 characters</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="decimals">Decimals</Label>
                  <Select value={decimals.toString()} onValueChange={(value) => setDecimals(Number.parseInt(value))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="0">0 (No decimals)</SelectItem>
                      <SelectItem value="2">2</SelectItem>
                      <SelectItem value="4">4</SelectItem>
                      <SelectItem value="6">6 (Recommended)</SelectItem>
                      <SelectItem value="8">8</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="totalSupply">Total Supply *</Label>
                  <Input
                    id="totalSupply"
                    type="number"
                    placeholder="1000000"
                    value={totalSupply}
                    onChange={(e) => setTotalSupply(e.target.value)}
                    required
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  placeholder="Describe your token's purpose and utility..."
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="imageUrl">Image URL (Optional)</Label>
                <Input
                  id="imageUrl"
                  type="url"
                  placeholder="https://example.com/token-image.png"
                  value={imageUrl}
                  onChange={(e) => setImageUrl(e.target.value)}
                />
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="policy" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Minting Policy Configuration</CardTitle>
              <CardDescription>Define how your token can be minted and managed</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <Label>Script Type</Label>
                <div className="flex space-x-4">
                  <div
                    className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                      scriptType === "native"
                        ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                        : "border-gray-200 dark:border-gray-700"
                    }`}
                    onClick={() => setScriptType("native")}
                  >
                    <div className="flex items-center space-x-2 mb-2">
                      <Code className="h-5 w-5" />
                      <span className="font-semibold">Native Script</span>
                      <Badge variant="secondary">Recommended</Badge>
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      Simple, efficient scripts for basic minting policies
                    </p>
                  </div>
                  <div
                    className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                      scriptType === "plutus"
                        ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                        : "border-gray-200 dark:border-gray-700"
                    }`}
                    onClick={() => setScriptType("plutus")}
                  >
                    <div className="flex items-center space-x-2 mb-2">
                      <Shield className="h-5 w-5" />
                      <span className="font-semibold">Plutus Script</span>
                      <Badge variant="outline">Advanced</Badge>
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      Smart contracts with complex logic and conditions
                    </p>
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="mintingPolicy">Minting Policy</Label>
                <Select value={mintingPolicy} onValueChange={(value: any) => setMintingPolicy(value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="unlimited">Unlimited Minting</SelectItem>
                    <SelectItem value="limited">Limited Supply</SelectItem>
                    <SelectItem value="time-locked">Time-Locked Minting</SelectItem>
                    <SelectItem value="custom">Custom Script</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {mintingPolicy === "time-locked" && (
                <div className="space-y-2">
                  <Label htmlFor="lockUntil">Lock Until (UTC)</Label>
                  <Input
                    id="lockUntil"
                    type="datetime-local"
                    value={lockUntil}
                    onChange={(e) => setLockUntil(e.target.value)}
                  />
                  <p className="text-xs text-gray-500">Minting will be disabled until this date</p>
                </div>
              )}

              {mintingPolicy === "custom" && (
                <div className="space-y-2">
                  <Label htmlFor="customScript">Custom Script</Label>
                  <Textarea
                    id="customScript"
                    placeholder={
                      scriptType === "native"
                        ? '{"type": "all", "scripts": [...]}'
                        : "validator :: Datum -> Redeemer -> ScriptContext -> Bool"
                    }
                    value={customScript}
                    onChange={(e) => setCustomScript(e.target.value)}
                    rows={6}
                    className="font-mono text-sm"
                  />
                  <p className="text-xs text-gray-500">
                    {scriptType === "native" ? "Native script JSON" : "Plutus validator code"}
                  </p>
                </div>
              )}

              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  {scriptType === "native"
                    ? "Native scripts are executed directly by the Cardano ledger and are more efficient for simple policies."
                    : "Plutus scripts run in a virtual machine and allow for complex smart contract logic but consume more resources."}
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="advanced" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Advanced Settings</CardTitle>
              <CardDescription>Configure additional token behaviors and security features</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Enable Token Burning</Label>
                    <p className="text-sm text-gray-500">Allow tokens to be permanently destroyed</p>
                  </div>
                  <Switch checked={enableBurning} onCheckedChange={setEnableBurning} />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Enable Transfers</Label>
                    <p className="text-sm text-gray-500">Allow tokens to be transferred between addresses</p>
                  </div>
                  <Switch checked={enableTransfers} onCheckedChange={setEnableTransfers} />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Require Signature</Label>
                    <p className="text-sm text-gray-500">Require creator signature for all operations</p>
                  </div>
                  <Switch checked={requireSignature} onCheckedChange={setRequireSignature} />
                </div>
              </div>

              <Alert>
                <Shield className="h-4 w-4" />
                <AlertDescription>
                  These settings will be enforced by the minting policy and cannot be changed after token creation.
                  Choose carefully based on your token's intended use case.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {error && (
        <Alert className="border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20">
          <AlertDescription className="text-red-800 dark:text-red-200">{error}</AlertDescription>
        </Alert>
      )}

      <div className="flex justify-end space-x-4">
        <Button type="button" variant="outline" onClick={() => router.back()}>
          Cancel
        </Button>
        <Button
          type="submit"
          disabled={isLoading}
          className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
        >
          {isLoading ? "Creating Token..." : "Create Token"}
        </Button>
      </div>
    </form>
  )
}
